// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc_order

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"reflect"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TradeType int64

const (
	TradeType_BID TradeType = 1
	TradeType_ASK TradeType = 2
)

func (p TradeType) String() string {
	switch p {
	case TradeType_BID:
		return "BID"
	case TradeType_ASK:
		return "ASK"
	}
	return "<UNSET>"
}

func TradeTypeFromString(s string) (TradeType, error) {
	switch s {
	case "BID":
		return TradeType_BID, nil
	case "ASK":
		return TradeType_ASK, nil
	}
	return TradeType(0), fmt.Errorf("not a valid TradeType string")
}

func TradeTypePtr(v TradeType) *TradeType { return &v }

func (p TradeType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TradeType) UnmarshalText(text []byte) error {
	q, err := TradeTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TradeType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TradeType(v)
	return nil
}

func (p *TradeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type OrderStatus int64

const (
	OrderStatus_ORDER_SUBMIT         OrderStatus = 1
	OrderStatus_ORDER_FILLED         OrderStatus = 2
	OrderStatus_ORDER_PARTIAL_FILLED OrderStatus = 3
	OrderStatus_ORDER_PARTIAL_CANCEL OrderStatus = 4
	OrderStatus_ORDER_CANCELED       OrderStatus = 5
	OrderStatus_ORDER_CANCELING      OrderStatus = 6
	OrderStatus_ORDER_STATUSUNKNOW   OrderStatus = 7
)

func (p OrderStatus) String() string {
	switch p {
	case OrderStatus_ORDER_SUBMIT:
		return "ORDER_SUBMIT"
	case OrderStatus_ORDER_FILLED:
		return "ORDER_FILLED"
	case OrderStatus_ORDER_PARTIAL_FILLED:
		return "ORDER_PARTIAL_FILLED"
	case OrderStatus_ORDER_PARTIAL_CANCEL:
		return "ORDER_PARTIAL_CANCEL"
	case OrderStatus_ORDER_CANCELED:
		return "ORDER_CANCELED"
	case OrderStatus_ORDER_CANCELING:
		return "ORDER_CANCELING"
	case OrderStatus_ORDER_STATUSUNKNOW:
		return "ORDER_STATUSUNKNOW"
	}
	return "<UNSET>"
}

func OrderStatusFromString(s string) (OrderStatus, error) {
	switch s {
	case "ORDER_SUBMIT":
		return OrderStatus_ORDER_SUBMIT, nil
	case "ORDER_FILLED":
		return OrderStatus_ORDER_FILLED, nil
	case "ORDER_PARTIAL_FILLED":
		return OrderStatus_ORDER_PARTIAL_FILLED, nil
	case "ORDER_PARTIAL_CANCEL":
		return OrderStatus_ORDER_PARTIAL_CANCEL, nil
	case "ORDER_CANCELED":
		return OrderStatus_ORDER_CANCELED, nil
	case "ORDER_CANCELING":
		return OrderStatus_ORDER_CANCELING, nil
	case "ORDER_STATUSUNKNOW":
		return OrderStatus_ORDER_STATUSUNKNOW, nil
	}
	return OrderStatus(0), fmt.Errorf("not a valid OrderStatus string")
}

func OrderStatusPtr(v OrderStatus) *OrderStatus { return &v }

func (p OrderStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *OrderStatus) UnmarshalText(text []byte) error {
	q, err := OrderStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *OrderStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = OrderStatus(v)
	return nil
}

func (p *OrderStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type RetunStatus int64

const (
	RetunStatus_FAIL RetunStatus = 0
	RetunStatus_SUCC RetunStatus = 1
)

func (p RetunStatus) String() string {
	switch p {
	case RetunStatus_FAIL:
		return "FAIL"
	case RetunStatus_SUCC:
		return "SUCC"
	}
	return "<UNSET>"
}

func RetunStatusFromString(s string) (RetunStatus, error) {
	switch s {
	case "FAIL":
		return RetunStatus_FAIL, nil
	case "SUCC":
		return RetunStatus_SUCC, nil
	}
	return RetunStatus(0), fmt.Errorf("not a valid RetunStatus string")
}

func RetunStatusPtr(v RetunStatus) *RetunStatus { return &v }

func (p RetunStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RetunStatus) UnmarshalText(text []byte) error {
	q, err := RetunStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *RetunStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = RetunStatus(v)
	return nil
}

func (p *RetunStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - Aorb
//  - Who
//  - Symbol
//  - Price
//  - Volume
//  - Fee
//  - ID
//  - Timestamp
//  - Status
//  - TradedVolume
//  - IpAddr
type Order struct {
	Aorb         TradeType    `thrift:"aorb,1,required" db:"aorb" json:"aorb"`
	Who          string       `thrift:"who,2,required" db:"who" json:"who"`
	Symbol       string       `thrift:"symbol,3,required" db:"symbol" json:"symbol"`
	Price        float64      `thrift:"price,4,required" db:"price" json:"price"`
	Volume       float64      `thrift:"volume,5,required" db:"volume" json:"volume"`
	Fee          float64      `thrift:"fee,6,required" db:"fee" json:"fee"`
	ID           *int64       `thrift:"id,7" db:"id" json:"id,omitempty"`
	Timestamp    *int64       `thrift:"timestamp,8" db:"timestamp" json:"timestamp,omitempty"`
	Status       *OrderStatus `thrift:"status,9" db:"status" json:"status,omitempty"`
	TradedVolume *float64     `thrift:"tradedVolume,10" db:"tradedVolume" json:"tradedVolume,omitempty"`
	IpAddr       string       `thrift:"ipAddr,11,required" db:"ipAddr" json:"ipAddr"`
}

func NewOrder() *Order {
	return &Order{}
}

func (p *Order) GetAorb() TradeType {
	return p.Aorb
}

func (p *Order) GetWho() string {
	return p.Who
}

func (p *Order) GetSymbol() string {
	return p.Symbol
}

func (p *Order) GetPrice() float64 {
	return p.Price
}

func (p *Order) GetVolume() float64 {
	return p.Volume
}

func (p *Order) GetFee() float64 {
	return p.Fee
}

var Order_ID_DEFAULT int64

func (p *Order) GetID() int64 {
	if !p.IsSetID() {
		return Order_ID_DEFAULT
	}
	return *p.ID
}

var Order_Timestamp_DEFAULT int64

func (p *Order) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return Order_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var Order_Status_DEFAULT OrderStatus

func (p *Order) GetStatus() OrderStatus {
	if !p.IsSetStatus() {
		return Order_Status_DEFAULT
	}
	return *p.Status
}

var Order_TradedVolume_DEFAULT float64

func (p *Order) GetTradedVolume() float64 {
	if !p.IsSetTradedVolume() {
		return Order_TradedVolume_DEFAULT
	}
	return *p.TradedVolume
}

func (p *Order) GetIpAddr() string {
	return p.IpAddr
}
func (p *Order) IsSetID() bool {
	return p.ID != nil
}

func (p *Order) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *Order) IsSetStatus() bool {
	return p.Status != nil
}

func (p *Order) IsSetTradedVolume() bool {
	return p.TradedVolume != nil
}

func (p *Order) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAorb bool = false
	var issetWho bool = false
	var issetSymbol bool = false
	var issetPrice bool = false
	var issetVolume bool = false
	var issetFee bool = false
	var issetIpAddr bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetAorb = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetWho = true
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetSymbol = true
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetPrice = true
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetVolume = true
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetFee = true
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetIpAddr = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAorb {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Aorb is not set"))
	}
	if !issetWho {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Who is not set"))
	}
	if !issetSymbol {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Symbol is not set"))
	}
	if !issetPrice {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Price is not set"))
	}
	if !issetVolume {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Volume is not set"))
	}
	if !issetFee {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Fee is not set"))
	}
	if !issetIpAddr {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IpAddr is not set"))
	}
	return nil
}

func (p *Order) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TradeType(v)
		p.Aorb = temp
	}
	return nil
}

func (p *Order) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Who = v
	}
	return nil
}

func (p *Order) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Symbol = v
	}
	return nil
}

func (p *Order) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *Order) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Volume = v
	}
	return nil
}

func (p *Order) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Fee = v
	}
	return nil
}

func (p *Order) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *Order) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *Order) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := OrderStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *Order) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.TradedVolume = &v
	}
	return nil
}

func (p *Order) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.IpAddr = v
	}
	return nil
}

func (p *Order) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Order"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Order) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("aorb", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aorb: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Aorb)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.aorb (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aorb: ", p), err)
	}
	return err
}

func (p *Order) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("who", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:who: ", p), err)
	}
	if err := oprot.WriteString(string(p.Who)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.who (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:who: ", p), err)
	}
	return err
}

func (p *Order) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:symbol: ", p), err)
	}
	if err := oprot.WriteString(string(p.Symbol)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.symbol (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:symbol: ", p), err)
	}
	return err
}

func (p *Order) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:price: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.price (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:price: ", p), err)
	}
	return err
}

func (p *Order) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("volume", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:volume: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Volume)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.volume (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:volume: ", p), err)
	}
	return err
}

func (p *Order) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fee", thrift.DOUBLE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fee: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Fee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fee (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fee: ", p), err)
	}
	return err
}

func (p *Order) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:id: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:id: ", p), err)
		}
	}
	return err
}

func (p *Order) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:timestamp: ", p), err)
		}
	}
	return err
}

func (p *Order) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:status: ", p), err)
		}
	}
	return err
}

func (p *Order) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTradedVolume() {
		if err := oprot.WriteFieldBegin("tradedVolume", thrift.DOUBLE, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:tradedVolume: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.TradedVolume)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tradedVolume (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:tradedVolume: ", p), err)
		}
	}
	return err
}

func (p *Order) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ipAddr", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ipAddr: ", p), err)
	}
	if err := oprot.WriteString(string(p.IpAddr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ipAddr (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ipAddr: ", p), err)
	}
	return err
}

func (p *Order) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Order(%+v)", *p)
}

// Attributes:
//  - Status
//  - Info
//  - Order
type ReturnInfo struct {
	Status RetunStatus `thrift:"Status,1,required" db:"Status" json:"Status"`
	Info   string      `thrift:"Info,2,required" db:"Info" json:"Info"`
	Order  *Order      `thrift:"Order,3" db:"Order" json:"Order,omitempty"`
}

func NewReturnInfo() *ReturnInfo {
	return &ReturnInfo{}
}

func (p *ReturnInfo) GetStatus() RetunStatus {
	return p.Status
}

func (p *ReturnInfo) GetInfo() string {
	return p.Info
}

var ReturnInfo_Order_DEFAULT *Order

func (p *ReturnInfo) GetOrder() *Order {
	if !p.IsSetOrder() {
		return ReturnInfo_Order_DEFAULT
	}
	return p.Order
}
func (p *ReturnInfo) IsSetOrder() bool {
	return p.Order != nil
}

func (p *ReturnInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetStatus = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetInfo = true
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Info is not set"))
	}
	return nil
}

func (p *ReturnInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := RetunStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *ReturnInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *ReturnInfo) ReadField3(iprot thrift.TProtocol) error {
	p.Order = &Order{}
	if err := p.Order.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Order), err)
	}
	return nil
}

func (p *ReturnInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReturnInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReturnInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Status: ", p), err)
	}
	return err
}

func (p *ReturnInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Info", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Info (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Info: ", p), err)
	}
	return err
}

func (p *ReturnInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err := oprot.WriteFieldBegin("Order", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Order: ", p), err)
		}
		if err := p.Order.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Order), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Order: ", p), err)
		}
	}
	return err
}

func (p *ReturnInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReturnInfo(%+v)", *p)
}

type IOrder interface {
	// Parameters:
	//  - Order
	EnOrder(ctx context.Context, order *Order) (r *ReturnInfo, err error)
	// Parameters:
	//  - User
	//  - ID
	//  - Symbol
	CancelOrder(ctx context.Context, user string, id int64, symbol string) (r *ReturnInfo, err error)
	// Parameters:
	//  - Symbol
	//  - Durations
	CancelRobotOverTimeOrder(ctx context.Context, symbol string, durations int64) (r *ReturnInfo, err error)
	// Parameters:
	//  - User
	//  - ID
	//  - Symbol
	GetOrder(ctx context.Context, user string, id int64, symbol string) (r *ReturnInfo, err error)
}

type IOrderClient struct {
	c thrift.TClient
}

func NewIOrderClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IOrderClient {
	return &IOrderClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewIOrderClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IOrderClient {
	return &IOrderClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewIOrderClient(c thrift.TClient) *IOrderClient {
	return &IOrderClient{
		c: c,
	}
}

func (p *IOrderClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Order
func (p *IOrderClient) EnOrder(ctx context.Context, order *Order) (r *ReturnInfo, err error) {
	var _args0 IOrderEnOrderArgs
	_args0.Order = order
	var _result1 IOrderEnOrderResult
	if err = p.Client_().Call(ctx, "enOrder", &_args0, &_result1); err != nil {
		return
	}
	return _result1.GetSuccess(), nil
}

// Parameters:
//  - User
//  - ID
//  - Symbol
func (p *IOrderClient) CancelOrder(ctx context.Context, user string, id int64, symbol string) (r *ReturnInfo, err error) {
	var _args2 IOrderCancelOrderArgs
	_args2.User = user
	_args2.ID = id
	_args2.Symbol = symbol
	var _result3 IOrderCancelOrderResult
	if err = p.Client_().Call(ctx, "cancelOrder", &_args2, &_result3); err != nil {
		return
	}
	return _result3.GetSuccess(), nil
}

// Parameters:
//  - Symbol
//  - Durations
func (p *IOrderClient) CancelRobotOverTimeOrder(ctx context.Context, symbol string, durations int64) (r *ReturnInfo, err error) {
	var _args4 IOrderCancelRobotOverTimeOrderArgs
	_args4.Symbol = symbol
	_args4.Durations = durations
	var _result5 IOrderCancelRobotOverTimeOrderResult
	if err = p.Client_().Call(ctx, "cancelRobotOverTimeOrder", &_args4, &_result5); err != nil {
		return
	}
	return _result5.GetSuccess(), nil
}

// Parameters:
//  - User
//  - ID
//  - Symbol
func (p *IOrderClient) GetOrder(ctx context.Context, user string, id int64, symbol string) (r *ReturnInfo, err error) {
	var _args6 IOrderGetOrderArgs
	_args6.User = user
	_args6.ID = id
	_args6.Symbol = symbol
	var _result7 IOrderGetOrderResult
	if err = p.Client_().Call(ctx, "getOrder", &_args6, &_result7); err != nil {
		return
	}
	return _result7.GetSuccess(), nil
}

type IOrderProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      IOrder
}

func (p *IOrderProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *IOrderProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *IOrderProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewIOrderProcessor(handler IOrder) *IOrderProcessor {

	self8 := &IOrderProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self8.processorMap["enOrder"] = &iOrderProcessorEnOrder{handler: handler}
	self8.processorMap["cancelOrder"] = &iOrderProcessorCancelOrder{handler: handler}
	self8.processorMap["cancelRobotOverTimeOrder"] = &iOrderProcessorCancelRobotOverTimeOrder{handler: handler}
	self8.processorMap["getOrder"] = &iOrderProcessorGetOrder{handler: handler}
	return self8
}

func (p *IOrderProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x9.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x9

}

type iOrderProcessorEnOrder struct {
	handler IOrder
}

func (p *iOrderProcessorEnOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IOrderEnOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("enOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IOrderEnOrderResult{}
	var retval *ReturnInfo
	var err2 error
	if retval, err2 = p.handler.EnOrder(ctx, args.Order); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing enOrder: "+err2.Error())
		oprot.WriteMessageBegin("enOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("enOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iOrderProcessorCancelOrder struct {
	handler IOrder
}

func (p *iOrderProcessorCancelOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IOrderCancelOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancelOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IOrderCancelOrderResult{}
	var retval *ReturnInfo
	var err2 error
	if retval, err2 = p.handler.CancelOrder(ctx, args.User, args.ID, args.Symbol); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelOrder: "+err2.Error())
		oprot.WriteMessageBegin("cancelOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("cancelOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iOrderProcessorCancelRobotOverTimeOrder struct {
	handler IOrder
}

func (p *iOrderProcessorCancelRobotOverTimeOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IOrderCancelRobotOverTimeOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancelRobotOverTimeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IOrderCancelRobotOverTimeOrderResult{}
	var retval *ReturnInfo
	var err2 error
	if retval, err2 = p.handler.CancelRobotOverTimeOrder(ctx, args.Symbol, args.Durations); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelRobotOverTimeOrder: "+err2.Error())
		oprot.WriteMessageBegin("cancelRobotOverTimeOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("cancelRobotOverTimeOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iOrderProcessorGetOrder struct {
	handler IOrder
}

func (p *iOrderProcessorGetOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IOrderGetOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IOrderGetOrderResult{}
	var retval *ReturnInfo
	var err2 error
	if retval, err2 = p.handler.GetOrder(ctx, args.User, args.ID, args.Symbol); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOrder: "+err2.Error())
		oprot.WriteMessageBegin("getOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Order
type IOrderEnOrderArgs struct {
	Order *Order `thrift:"order,1" db:"order" json:"order"`
}

func NewIOrderEnOrderArgs() *IOrderEnOrderArgs {
	return &IOrderEnOrderArgs{}
}

var IOrderEnOrderArgs_Order_DEFAULT *Order

func (p *IOrderEnOrderArgs) GetOrder() *Order {
	if !p.IsSetOrder() {
		return IOrderEnOrderArgs_Order_DEFAULT
	}
	return p.Order
}
func (p *IOrderEnOrderArgs) IsSetOrder() bool {
	return p.Order != nil
}

func (p *IOrderEnOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IOrderEnOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Order = &Order{}
	if err := p.Order.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Order), err)
	}
	return nil
}

func (p *IOrderEnOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("enOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IOrderEnOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:order: ", p), err)
	}
	if err := p.Order.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Order), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:order: ", p), err)
	}
	return err
}

func (p *IOrderEnOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IOrderEnOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IOrderEnOrderResult struct {
	Success *ReturnInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIOrderEnOrderResult() *IOrderEnOrderResult {
	return &IOrderEnOrderResult{}
}

var IOrderEnOrderResult_Success_DEFAULT *ReturnInfo

func (p *IOrderEnOrderResult) GetSuccess() *ReturnInfo {
	if !p.IsSetSuccess() {
		return IOrderEnOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IOrderEnOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IOrderEnOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IOrderEnOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ReturnInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IOrderEnOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("enOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IOrderEnOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IOrderEnOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IOrderEnOrderResult(%+v)", *p)
}

// Attributes:
//  - User
//  - ID
//  - Symbol
type IOrderCancelOrderArgs struct {
	User   string `thrift:"user,1" db:"user" json:"user"`
	ID     int64  `thrift:"id,2" db:"id" json:"id"`
	Symbol string `thrift:"symbol,3" db:"symbol" json:"symbol"`
}

func NewIOrderCancelOrderArgs() *IOrderCancelOrderArgs {
	return &IOrderCancelOrderArgs{}
}

func (p *IOrderCancelOrderArgs) GetUser() string {
	return p.User
}

func (p *IOrderCancelOrderArgs) GetID() int64 {
	return p.ID
}

func (p *IOrderCancelOrderArgs) GetSymbol() string {
	return p.Symbol
}
func (p *IOrderCancelOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IOrderCancelOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *IOrderCancelOrderArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *IOrderCancelOrderArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Symbol = v
	}
	return nil
}

func (p *IOrderCancelOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IOrderCancelOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *IOrderCancelOrderArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *IOrderCancelOrderArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:symbol: ", p), err)
	}
	if err := oprot.WriteString(string(p.Symbol)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.symbol (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:symbol: ", p), err)
	}
	return err
}

func (p *IOrderCancelOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IOrderCancelOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IOrderCancelOrderResult struct {
	Success *ReturnInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIOrderCancelOrderResult() *IOrderCancelOrderResult {
	return &IOrderCancelOrderResult{}
}

var IOrderCancelOrderResult_Success_DEFAULT *ReturnInfo

func (p *IOrderCancelOrderResult) GetSuccess() *ReturnInfo {
	if !p.IsSetSuccess() {
		return IOrderCancelOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IOrderCancelOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IOrderCancelOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IOrderCancelOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ReturnInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IOrderCancelOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IOrderCancelOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IOrderCancelOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IOrderCancelOrderResult(%+v)", *p)
}

// Attributes:
//  - Symbol
//  - Durations
type IOrderCancelRobotOverTimeOrderArgs struct {
	Symbol    string `thrift:"symbol,1" db:"symbol" json:"symbol"`
	Durations int64  `thrift:"durations,2" db:"durations" json:"durations"`
}

func NewIOrderCancelRobotOverTimeOrderArgs() *IOrderCancelRobotOverTimeOrderArgs {
	return &IOrderCancelRobotOverTimeOrderArgs{}
}

func (p *IOrderCancelRobotOverTimeOrderArgs) GetSymbol() string {
	return p.Symbol
}

func (p *IOrderCancelRobotOverTimeOrderArgs) GetDurations() int64 {
	return p.Durations
}
func (p *IOrderCancelRobotOverTimeOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IOrderCancelRobotOverTimeOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Symbol = v
	}
	return nil
}

func (p *IOrderCancelRobotOverTimeOrderArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Durations = v
	}
	return nil
}

func (p *IOrderCancelRobotOverTimeOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelRobotOverTimeOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IOrderCancelRobotOverTimeOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:symbol: ", p), err)
	}
	if err := oprot.WriteString(string(p.Symbol)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.symbol (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:symbol: ", p), err)
	}
	return err
}

func (p *IOrderCancelRobotOverTimeOrderArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("durations", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:durations: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Durations)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.durations (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:durations: ", p), err)
	}
	return err
}

func (p *IOrderCancelRobotOverTimeOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IOrderCancelRobotOverTimeOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IOrderCancelRobotOverTimeOrderResult struct {
	Success *ReturnInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIOrderCancelRobotOverTimeOrderResult() *IOrderCancelRobotOverTimeOrderResult {
	return &IOrderCancelRobotOverTimeOrderResult{}
}

var IOrderCancelRobotOverTimeOrderResult_Success_DEFAULT *ReturnInfo

func (p *IOrderCancelRobotOverTimeOrderResult) GetSuccess() *ReturnInfo {
	if !p.IsSetSuccess() {
		return IOrderCancelRobotOverTimeOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IOrderCancelRobotOverTimeOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IOrderCancelRobotOverTimeOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IOrderCancelRobotOverTimeOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ReturnInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IOrderCancelRobotOverTimeOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelRobotOverTimeOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IOrderCancelRobotOverTimeOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IOrderCancelRobotOverTimeOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IOrderCancelRobotOverTimeOrderResult(%+v)", *p)
}

// Attributes:
//  - User
//  - ID
//  - Symbol
type IOrderGetOrderArgs struct {
	User   string `thrift:"user,1" db:"user" json:"user"`
	ID     int64  `thrift:"id,2" db:"id" json:"id"`
	Symbol string `thrift:"symbol,3" db:"symbol" json:"symbol"`
}

func NewIOrderGetOrderArgs() *IOrderGetOrderArgs {
	return &IOrderGetOrderArgs{}
}

func (p *IOrderGetOrderArgs) GetUser() string {
	return p.User
}

func (p *IOrderGetOrderArgs) GetID() int64 {
	return p.ID
}

func (p *IOrderGetOrderArgs) GetSymbol() string {
	return p.Symbol
}
func (p *IOrderGetOrderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IOrderGetOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *IOrderGetOrderArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *IOrderGetOrderArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Symbol = v
	}
	return nil
}

func (p *IOrderGetOrderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getOrder_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IOrderGetOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *IOrderGetOrderArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *IOrderGetOrderArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:symbol: ", p), err)
	}
	if err := oprot.WriteString(string(p.Symbol)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.symbol (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:symbol: ", p), err)
	}
	return err
}

func (p *IOrderGetOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IOrderGetOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IOrderGetOrderResult struct {
	Success *ReturnInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIOrderGetOrderResult() *IOrderGetOrderResult {
	return &IOrderGetOrderResult{}
}

var IOrderGetOrderResult_Success_DEFAULT *ReturnInfo

func (p *IOrderGetOrderResult) GetSuccess() *ReturnInfo {
	if !p.IsSetSuccess() {
		return IOrderGetOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IOrderGetOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IOrderGetOrderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IOrderGetOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ReturnInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IOrderGetOrderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getOrder_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IOrderGetOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IOrderGetOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IOrderGetOrderResult(%+v)", *p)
}
